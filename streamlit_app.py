import pandas as pd
import streamlit as st
from pathlib import Path

# === Streamlit Page Setup ===
st.set_page_config(page_title="DevOps AI Agent Dashboard", layout="wide")

# Paths to data files generated by metrics simulator + agent
data_dir = Path(__file__).resolve().parents[0] / "data"
metrics_path = data_dir / "sample_metrics.csv"
anomalies_path = data_dir / "last_anomalies.csv"
reports_path = data_dir / "last_reports.txt"

# Dashboard Title
st.title("DevOps AI Agent Dashboard")

# ===============================
# Section 1: Metrics Visualization
# ===============================
if metrics_path.exists():
    # Load and sort metrics data by timestamp
    df = pd.read_csv(metrics_path, parse_dates=["timestamp"]).sort_values("timestamp")

    # Display metrics time-series chart (CPU, memory, latency)
    st.subheader("Recent Metrics")
    st.line_chart(df.set_index("timestamp")[["cpu", "memory", "latency_ms"]])
else:
    st.warning("No metrics found. Run `python src/metrics_simulator.py` first.")

# ===============================
# Section 2: Anomalies Table
# ===============================
if anomalies_path.exists():
    # Load anomalies detected from last agent run
    an = pd.read_csv(anomalies_path, parse_dates=["timestamp"]).sort_values("timestamp")

    st.subheader("Anomalies (last run)")
    # Show last 200 anomalies for readability
    st.dataframe(an.tail(200), use_container_width=True)
else:
    st.info("No anomalies file yet. Run the agent to generate one.")

# ===============================
# Section 3: Incident Reports
# ===============================
if reports_path.exists():
    # Read incident reports saved by agent
    reports = reports_path.read_text().strip().split("\n\n")

    st.subheader("Incident Reports")

    # Display the 10 most recent incident reports
    # Apply color-coding based on severity prefix (üö®, ‚ö†Ô∏è, ‚ÑπÔ∏è)
    for r in reports[-10:]:
        if r.startswith("üö®"):
            st.error(r)      # Critical alert ‚Üí red box
        elif r.startswith("‚ö†Ô∏è"):
            st.warning(r)    # Warning alert ‚Üí yellow box
        elif r.startswith("‚ÑπÔ∏è"):
            st.info(r)       # Informational alert ‚Üí blue box
        else:
            st.write(r)      # Fallback: plain text
else:
    st.info("No reports available yet. Run the agent first.")
